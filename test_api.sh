#!/bin/bash

# Script para probar las nuevas caracter√≠sticas de la API

echo "üöó Probando API de Dashboard - Caracter√≠sticas T√©cnicas Completas"
echo "================================================================"

API_URL="http://localhost:3001"

# Funci√≥n para hacer peticiones con formato JSON
make_request() {
    local method=$1
    local endpoint=$2
    local data=$3
    
    echo "üì° $method $endpoint"
    if [ -n "$data" ]; then
        curl -s -X $method "$API_URL$endpoint" \
            -H "Content-Type: application/json" \
            -d "$data" | jq '.' 2>/dev/null || echo "Error en la petici√≥n"
    else
        curl -s -X $method "$API_URL$endpoint" | jq '.' 2>/dev/null || echo "Error en la petici√≥n"
    fi
    echo ""
}

# Verificar que el servidor est√© corriendo
echo "üîç Verificando servidor..."
if ! curl -s "$API_URL" > /dev/null; then
    echo "‚ùå El servidor no est√° corriendo en $API_URL"
    echo "Ejecuta: npm start"
    exit 1
fi
echo "‚úÖ Servidor corriendo"
echo ""

# Obtener todos los veh√≠culos
echo "1. Obtener todos los veh√≠culos"
make_request "GET" "/vehicles"

# Obtener un veh√≠culo espec√≠fico
echo "2. Obtener el primer veh√≠culo con todas sus caracter√≠sticas"
VEHICLE_ID=$(curl -s "$API_URL/vehicles" | jq -r '.[0].id' 2>/dev/null)
if [ "$VEHICLE_ID" != "null" ] && [ -n "$VEHICLE_ID" ]; then
    make_request "GET" "/vehicles/$VEHICLE_ID"
else
    echo "‚ùå No se encontraron veh√≠culos"
fi

# Crear un veh√≠culo de prueba con caracter√≠sticas completas
echo "3. Crear un veh√≠culo de prueba con caracter√≠sticas t√©cnicas completas"
VEHICLE_DATA='{
    "nombre": "Test Vehicle XLE",
    "marca": "Toyota",
    "modelo": "Test Model",
    "anio": 2024,
    "precio": 40000,
    "descripcion": "Veh√≠culo de prueba con todas las caracter√≠sticas t√©cnicas",
    "destacado": true,
    "kilometraje": "1000",
    "observaciones": "Veh√≠culo de prueba para la API",
    "combustible": "H√≠brido",
    "cilindrada": "2.5",
    "potencia": "200 CV",
    "alimentacion": "Inyecci√≥n Directa + Motor El√©ctrico",
    "cilindros": 4,
    "valvulas": 16,
    "traccion": "4X4",
    "transmision": "CVT",
    "velocidades": "CVT con modo manual",
    "neumaticos": "R19",
    "frenosDelanteros": "Discos ventilados",
    "frenosTraseros": "Discos s√≥lidos",
    "direccionAsistida": true,
    "direccionAsistidaTipo": "El√©ctrica",
    "aireAcondicionado": true,
    "asientoDelanteroAjuste": true,
    "volanteRegulable": true,
    "asientosTraseros": "Abatibles y calefaccionados",
    "tapizados": "Cuero Premium",
    "cierrePuertas": "Centralizado inteligente",
    "vidriosDelanteros": "El√©ctricos con auto-subida",
    "vidriosTraseros": "El√©ctricos con control parental",
    "espejosExteriores": "El√©ctricos con memoria",
    "farosAntiniebla": true,
    "computadoraBordo": true,
    "llantasAleacion": true,
    "camaraEstacionamiento": true,
    "asistenciaArranquePendientes": true,
    "controlEconomiaCombustible": true,
    "luzDiurna": true,
    "abs": true,
    "distribucionElectronicaFrenado": true,
    "asistenciaFrenadaEmergencia": true,
    "airbagsDelanteros": true,
    "airbagsCortina": "Delanteros, traseros y laterales",
    "airbagRodillaConductor": true,
    "airbagsLaterales": "Completos",
    "alarma": true,
    "inmovilizadorMotor": true,
    "anclajeAsientosInfantiles": true,
    "autobloqueoPuertas": true,
    "controlEstabilidad": true,
    "controlTraccion": true,
    "cantidadAirbags": 12,
    "equipoMusica": "Sistema premium JBL",
    "comandosVolante": true,
    "conexionAuxiliar": true,
    "conexionUSB": true,
    "interfazBluetooth": true,
    "controlVozDispositivos": true,
    "pantalla": true,
    "sistemaNavegacionGPS": true,
    "appleCarPlay": true,
    "mirrorlink": true
}'

NEW_VEHICLE_ID=$(curl -s -X POST "$API_URL/vehicles" \
    -H "Content-Type: application/json" \
    -d "$VEHICLE_DATA" | jq -r '.id' 2>/dev/null)

if [ "$NEW_VEHICLE_ID" != "null" ] && [ -n "$NEW_VEHICLE_ID" ]; then
    echo "‚úÖ Veh√≠culo creado con ID: $NEW_VEHICLE_ID"
else
    echo "‚ùå Error al crear el veh√≠culo"
fi

# Actualizar el veh√≠culo
echo "4. Actualizar caracter√≠sticas del veh√≠culo"
if [ "$NEW_VEHICLE_ID" != "null" ] && [ -n "$NEW_VEHICLE_ID" ]; then
    UPDATE_DATA='{
        "precio": 42000,
        "kilometraje": "1500",
        "observaciones": "Actualizado con nuevas caracter√≠sticas",
        "sistemaNavegacionGPS": false,
        "cantidadAirbags": 10
    }'
    
    make_request "PATCH" "/vehicles/$NEW_VEHICLE_ID" "$UPDATE_DATA"
fi

# Obtener contactos
echo "5. Obtener contactos"
make_request "GET" "/contacts"

# Obtener im√°genes
echo "6. Obtener im√°genes"
make_request "GET" "/images"

echo "üéâ Pruebas completadas!"
echo ""
echo "üìñ Para m√°s informaci√≥n consulta:"
echo "   - Documentaci√≥n Swagger: $API_URL/api"
echo "   - Ejemplos detallados: ./VEHICLE_EXAMPLES.md"
echo "   - README completo: ./README.md"
